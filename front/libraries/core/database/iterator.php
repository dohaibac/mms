<?php
 defined('LIBS_PATH') or die; abstract class JDatabaseIterator implements Countable, Iterator { protected $cursor; protected $class; private $_column; private $_current; private $_key; private $_fetched = 0; public function __construct($cursor, $column = null, $class = 'stdClass') { if (!class_exists($class)) { throw new InvalidArgumentException(sprintf('new %s(*%s*, cursor)', get_class($this), gettype($class))); } $this->cursor = $cursor; $this->class = $class; $this->_column = $column; $this->_fetched = 0; $this->next(); } public function __destruct() { if ($this->cursor) { $this->freeResult($this->cursor); } } public function current() { return $this->_current; } public function key() { return $this->_key; } public function next() { $this->_key = $this->_fetched; $this->_current = $this->fetchObject(); if ($this->_current) { if (isset($this->_current->{$this->_column})) { $this->_key = $this->_current->{$this->_column}; } $this->_fetched++; } } public function rewind() { } public function valid() { return (boolean) $this->_current; } abstract protected function fetchObject(); abstract protected function freeResult(); }