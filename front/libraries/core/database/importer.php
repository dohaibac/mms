<?php
 defined('LIBS_PATH') or die; abstract class JDatabaseImporter { protected $cache = array(); protected $db = null; protected $from = array(); protected $asFormat = 'xml'; protected $options = null; public function __construct() { $this->options = new stdClass; $this->cache = array('columns' => array(), 'keys' => array()); $this->withStructure(); $this->asXml(); } public function asXml() { $this->asFormat = 'xml'; return $this; } abstract public function check(); public function from($from) { $this->from = $from; return $this; } protected function getDropColumnSQL($table, $name) { return 'ALTER TABLE ' . $this->db->quoteName($table) . ' DROP COLUMN ' . $this->db->quoteName($name); } protected function getRealTableName($table) { $prefix = $this->db->getPrefix(); $table = preg_replace('|^#__|', $prefix, $table); return $table; } protected function mergeStructure() { $prefix = $this->db->getPrefix(); $tables = $this->db->getTableList(); if ($this->from instanceof SimpleXMLElement) { $xml = $this->from; } else { $xml = new SimpleXMLElement($this->from); } $xmlTables = $xml->xpath('database/table_structure'); foreach ($xmlTables as $table) { $tableName = (string) $table['name']; $tableName = preg_replace('|^#__|', $prefix, $tableName); if (in_array($tableName, $tables)) { if ($queries = $this->getAlterTableSQL($xml->database->table_structure)) { foreach ($queries as $query) { $this->db->setQuery((string) $query); try { $this->db->execute(); } catch (RuntimeException $e) { $this->addLog('Fail: ' . $this->db->getQuery()); throw $e; } $this->addLog('Pass: ' . $this->db->getQuery()); } } } else { $sql = $this->xmlToCreate($table); $this->db->setQuery((string) $sql); try { $this->db->execute(); } catch (RuntimeException $e) { $this->addLog('Fail: ' . $this->db->getQuery()); throw $e; } $this->addLog('Pass: ' . $this->db->getQuery()); } } } public function setDbo(JDatabaseDriver $db) { $this->db = $db; return $this; } public function withStructure($setting = true) { $this->options->withStructure = (boolean) $setting; return $this; } }