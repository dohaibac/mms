<?php
 defined('LIBS_PATH') or die; class JCryptCipherSimple implements JCryptCipher { public function decrypt($data, JCryptKey $key) { if ($key->type != 'simple') { throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.'); } $decrypted = ''; $tmp = $key->public; $chars = $this->_hexToIntArray($data); $charCount = count($chars); for ($i = 0; $i < $charCount; $i = strlen($tmp)) { $tmp = $tmp . $tmp; } for ($i = 0; $i < $charCount; $i++) { $decrypted .= chr($chars[$i] ^ ord($tmp[$i])); } return $decrypted; } public function encrypt($data, JCryptKey $key) { if ($key->type != 'simple') { throw new InvalidArgumentException('Invalid key of type: ' . $key->type . '.  Expected simple.'); } $encrypted = ''; $tmp = $key->private; $chars = preg_split('//', $data, -1, PREG_SPLIT_NO_EMPTY); $charCount = count($chars); for ($i = 0; $i < $charCount; $i = strlen($tmp)) { $tmp = $tmp . $tmp; } for ($i = 0; $i < $charCount; $i++) { $encrypted .= $this->_intToHex(ord($tmp[$i]) ^ ord($chars[$i])); } return $encrypted; } public function generateKey(array $options = array()) { $key = new JCryptKey('simple'); $key->private = JCrypt::genRandomBytes(256); $key->public = $key->private; return $key; } private function _hexToInt($s, $i) { $j = (int) $i * 2; $k = 0; $s1 = (string) $s; $c = substr($s1, $j, 1); $c1 = substr($s1, $j + 1, 1); switch ($c) { case 'A': $k += 160; break; case 'B': $k += 176; break; case 'C': $k += 192; break; case 'D': $k += 208; break; case 'E': $k += 224; break; case 'F': $k += 240; break; case ' ': $k += 0; break; default: (int) $k = $k + (16 * (int) $c); break; } switch ($c1) { case 'A': $k += 10; break; case 'B': $k += 11; break; case 'C': $k += 12; break; case 'D': $k += 13; break; case 'E': $k += 14; break; case 'F': $k += 15; break; case ' ': $k += 0; break; default: $k += (int) $c1; break; } return $k; } private function _hexToIntArray($hex) { $array = array(); $j = (int) strlen($hex) / 2; for ($i = 0; $i < $j; $i++) { $array[$i] = (int) $this->_hexToInt($hex, $i); } return $array; } private function _intToHex($i) { $i = (int) $i; $j = (int) ($i / 16); if ($j === 0) { $s = ' '; } else { $s = strtoupper(dechex($j)); } $k = $i - $j * 16; $s = $s . strtoupper(dechex($k)); return $s; } }