<?php
 defined('LIBS_PATH') or die; class JInput implements Serializable, Countable { protected $options = array(); protected $filter = null; protected $data = array(); protected $inputs = array(); public function __construct($source = null, array $options = array()) { if (isset($options['filter'])) { $this->filter = $options['filter']; } else { $this->filter = JFilterInput::getInstance(); } if (is_null($source)) { $this->data = &$_REQUEST; } else { $this->data = $source; } $this->options = $options; } public function __get($name) { if (isset($this->inputs[$name])) { return $this->inputs[$name]; } $className = 'JInput' . ucfirst($name); if (class_exists($className)) { $this->inputs[$name] = new $className(null, $this->options); return $this->inputs[$name]; } $superGlobal = '_' . strtoupper($name); if (isset($GLOBALS[$superGlobal])) { $this->inputs[$name] = new JInput($GLOBALS[$superGlobal], $this->options); return $this->inputs[$name]; } } public function count() { return count($this->data); } public function get($name, $default = null, $filter = 'cmd') { if (isset($this->data[$name])) { return $this->filter->clean($this->data[$name], $filter); } return $default; } public function getArray(array $vars = array(), $datasource = null) { if (empty($vars) && is_null($datasource)) { $vars = $this->data; } $results = array(); foreach ($vars as $k => $v) { if (is_array($v)) { if (is_null($datasource)) { $results[$k] = $this->getArray($v, $this->get($k, null, 'array')); } else { $results[$k] = $this->getArray($v, $datasource[$k]); } } else { if (is_null($datasource)) { $results[$k] = $this->get($k, null, $v); } elseif (isset($datasource[$k])) { $results[$k] = $this->filter->clean($datasource[$k], $v); } else { $results[$k] = $this->filter->clean(null, $v); } } } return $results; } public function set($name, $value) { $this->data[$name] = $value; } public function def($name, $value) { if (isset($this->data[$name])) { return; } $this->data[$name] = $value; } public function __call($name, $arguments) { if (substr($name, 0, 3) == 'get') { $filter = substr($name, 3); $default = null; if (isset($arguments[1])) { $default = $arguments[1]; } return $this->get($arguments[0], $default, $filter); } } public function getMethod() { $method = strtoupper($_SERVER['REQUEST_METHOD']); return $method; } public function serialize() { $this->loadAllInputs(); $inputs = $this->inputs; unset($inputs['env']); unset($inputs['server']); return serialize(array($this->options, $this->data, $inputs)); } public function unserialize($input) { list($this->options, $this->data, $this->inputs) = unserialize($input); if (isset($this->options['filter'])) { $this->filter = $this->options['filter']; } else { $this->filter = JFilterInput::getInstance(); } } protected function loadAllInputs() { static $loaded = false; if (!$loaded) { foreach ($GLOBALS as $global => $data) { if (strpos($global, '_') === 0) { $global = strtolower($global); $global = substr($global, 1); $this->$global; } } $loaded = true; } } }