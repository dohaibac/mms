<?php
 function smarty_function_imagesize($params, &$smarty) { if (!$params['src']) return '<!-- Imagesizer Error: You must specify a source image -->'; $basepath = empty($params['basepath']) ? '' : $params['basepath']; if (!$paths = getImagePath($basepath, $params['src'], $smarty)) return false; if (!in_array(strtolower($paths['fileExt']), array('gif','jpeg','jpg','png'))) return '<!-- Imagesizer Error: Invalid file type -->'; $finalSize = getNewSize($params, $paths); if (!$finalImage = resizeAndCache($finalSize, $paths, $params)) return '<!-- Imagesizer Error: Could not resize the image -->'; $opts = 'alt="'.$params['alt'].'"'; $opts .= ( isset($params['class']) ) ? ' class="'.$params['class'].'"' : ''; $opts .= ( isset($params['id']) ) ? ' id="'.$params['id'].'"' : ''; $opts .= ( isset($params['title']) ) ? ' title="'.$params['title'].'"' : ''; $opts .= ( isset($params['style']) ) ? ' style="'.$params['style'].'"' : ''; if (!empty($basepath)) { $finalImage = $basepath .'/uploads/' . $finalImage; } return '<img src="'.$finalImage.'" '.$opts.' width="'.$finalSize[0].'" height="'.$finalSize[1].'" />'; } function getImagePath($basepath, $fileUrl, $smarty) { $paths['fileUrl'] = $fileUrl; $paths['fileName'] = basename($fileUrl); $scriptName = $_SERVER['SCRIPT_NAME']; $paths['docPath'] = removeFileFromPath(removeDoubleSlashes(str_replace($_SERVER['SCRIPT_NAME'],'',$_SERVER['SCRIPT_FILENAME']) . '/' . $_SERVER['REQUEST_URI'])); $docUri = isset($_SERVER['REDIRECT_URL']) ? $_SERVER['REDIRECT_URL'] : dirname($_SERVER['SCRIPT_NAME']); $docUri = removeDoubleSlashes('/' . $docUri . '/'); $fileUri = str_replace('http://'.$_SERVER['HTTP_HOST'], '', $fileUrl); $fileUri = str_replace('https://'.$_SERVER['HTTP_HOST'], '', $fileUri); if (substr($fileUri, 0, 1) == DIRECTORY_SEPARATOR) { $docSegments = explode(DIRECTORY_SEPARATOR, $docUri); $fileSegments = explode(DIRECTORY_SEPARATOR, $fileUri); while ( count($docSegments) || count($fileSegments) ) { $docSegment = array_shift($docSegments); $fileSegment = array_shift($fileSegments); if ( ($docSegment != $fileSegment) || $up) { $up = ($docSegment) ? '../' : ''; $relativeUri = $up . $relativeUri . $fileSegment . '/'; } } $fileUrl = rtrim($relativeUri,'/'); } $paths['docPath'] = empty($basepath) ? BASEPATH : $basepath . '/uploads'; $filePath = get_absolute_path(removeDoubleSlashes($paths['docPath'] . '/' . $fileUrl)); if (!is_readable($filePath)) { echo "<!-- Imagesizer Error: Could not find the file {$filePath} -->"; return false; } $pathInfo = pathinfo($filePath); $paths['filePath'] = $pathInfo['dirname']; $paths['fileExt'] = $pathInfo['extension']; $paths['fileBasename'] = $pathInfo['filename'] ? $pathInfo['filename'] : substr($paths['fileName'],0,strrpos($paths['fileName'],'.')); $paths['fileSrc'] = removeDoubleSlashes($paths['filePath'] . '/' . $paths['fileName']); $paths['cachePath'] = removeDoubleSlashes($paths['filePath'] . '/cache/'); if(!is_dir($paths['cachePath'])) { if (!@mkdir($paths['cachePath'], 0777)) { echo "<!-- Imagesizer Error: Could not create cache directory. Please create {$paths['cachePath']} manually and try again. -->"; return false; } if (!is_writable($paths['cachePath'])) { echo '<!-- Imagesizer Error: The cache directory is not writeable -->'; return false; } } $paths['cacheUrl'] = removeDoubleSlashes('/' . get_absolute_path( '/' . dirname($fileUrl)) . '/cache/'); return $paths; } function getNewSize($params, $paths) { list($oldWidth, $oldHeight) = getimagesize($paths['fileSrc']); $width = $params['width']; $height = $params['height']; $crop = $params['crop']; if (($oldWidth <= $width) && ($oldHeight <= $height) || (!$width && !$height)) { $newWidth = $oldWidth; $newHeight = $oldHeight; } elseif ($width && !$height) { if ($width > $oldWidth) $width = $oldWidth; $newWidth = $width; $newHeight = floor( $oldHeight * ($width / $oldWidth) ); } elseif ($height && !$width) { if ($height > $oldHeight) $height = $oldHeight; $newHeight = $height; $newWidth = floor( $oldWidth * ($height / $oldHeight) ); } else { if ($params['crop']) { $newWidth = ($width > $oldWidth) ? $oldWidth : $width; $newHeight = ($height > $oldHeight) ? $oldHeight : $height; $crop = true; } else { if ($width > $oldWidth) $width = $oldWidth; $newWidth = $width; $newHeight = floor( $oldHeight * ($width / $oldWidth) ); if ($newHeight > $height) { $newWidth = floor( $newWidth * ($height / $newHeight) ); $newHeight = $height; } } } return array($newWidth, $newHeight, $crop); } function resizeAndCache($finalSize, $paths, $params) { $width = $finalSize[0]; $height = $finalSize[1]; list($oldWidth, $oldHeight, $imgType) = getimagesize($paths['fileSrc']); if ( ($width >= $oldWidth) && ($height >= $oldHeight) && !$params['bw'] && !$params['radius'] ) return $paths['fileUrl']; $cachedName = $paths['fileBasename'] . '-' . $width . 'x' . $height; $cachedName .= ($params['bw']) ? '-bw' : ''; $cachedName .= ($params['colorize']) ? '-c'.trim($params['colorize'],'#') : ''; $cachedName .= ($params['radius']) ? '-r'.$params['radius'].trim($params['background'],'#') : ''; $cachedName .= ($params['forcepng']) ? '.png' : '.' . $paths['fileExt']; $cachedPath = $paths['cachePath'] . $cachedName; $cachedUrl = $paths['cacheUrl'] . $cachedName; $imageTime = @filemtime($paths['fileSrc']); $cacheTime = @filemtime($cachedPath); if (!is_file($cachedPath) || $imageTime > $cacheTime) { switch ($imgType) { case IMAGETYPE_GIF: $image = imagecreatefromgif($paths['fileSrc']); break; case IMAGETYPE_JPEG: $image = imagecreatefromjpeg($paths['fileSrc']); break; case IMAGETYPE_PNG: $image = imagecreatefrompng($paths['fileSrc']); break; default: return false; } $newImage = imagecreatetruecolor($width, $height); if (!$finalSize[2]) { imagecopyresampled($newImage, $image, 0, 0, 0, 0, $width, $height, $oldWidth, $oldHeight); } else { $oldRatio = $oldWidth / $oldHeight; $newRatio = $width / $height; $adjustedWidth = $width; $adjustedHeight = $height; if ($oldRatio > $newRatio) { $adjustedWidth = floor( $oldWidth * ($height / $oldHeight) ); $adjustedHeight = $height; $widthMargin = ($adjustedWidth - $width) / 2; } elseif ($oldRatio < $newRatio) { $adjustedHeight = floor( $oldHeight * ($width / $oldWidth) ); $adjustedWidth = $width; $heightMargin = ($adjustedHeight - $height) / 2; } imagecopyresampled($newImage, $image, 0, 0, 0, 0, $adjustedWidth, $adjustedHeight, $oldWidth, $oldHeight); } if ($params['bw']) { imagefilter($image, IMG_FILTER_GRAYSCALE); } elseif ($params['colorize']) { $rgb = rgb_from_hex($params['colorize']); imagefilter($newImage, IMG_FILTER_GRAYSCALE); imagefilter($newImage, IMG_FILTER_COLORIZE, $rgb['r'], $rgb['g'], $rgb['b']); } if ($params['radius']) { $mask = imagecreatetruecolor($width, $height); imagealphablending ($mask, true); $trans = imagecolorallocatealpha($mask, 0, 0, 0, 127); $black = imagecolorallocatealpha($mask, 0, 0, 0, 0); if (!imageistruecolor($newImage)) { $tmpImage = imagecreatetruecolor($width, $height); imagecopy($tmpImage,$newImage,0,0,0,0,$width, $height); $newImage = $tmpImage; } $radius = $params['radius']; $diameter = $radius * 2; imagefill($mask, 0, 0, $trans); imagefilledrectangle($mask, $radius, 0, ($width - $radius), $height, $black); imagefilledrectangle($mask, 0, $radius, $width, ($height - $radius), $black); $fillcolor = array(0, 0, 0, 0); imageSmoothArc ($mask, $radius, ($radius + 1), $diameter, $diameter, $fillcolor, 0, 12); imageSmoothArc ($mask, ($width - $radius - 2), ($radius + 1), $diameter, $diameter, $fillcolor, 0, 12); imageSmoothArc ($mask, $radius, ($height - $radius - 1), $diameter, $diameter, $fillcolor, 0, 12); imageSmoothArc ($mask, ($width - $radius - 2), ($height- $radius - 1), $diameter, $diameter, $fillcolor, 0, 12); $rounded = imagecreatetruecolor($width, $height); imagealphablending ($rounded, true); if ($params['forcepng']) { $imgType = IMAGETYPE_PNG; } if ( $params['background'] || ($imgType != IMAGETYPE_PNG) ) { $bg = $params['background'] ? $params['background'] : 'ffffff'; $rgb = rgb_from_hex($bg); imagefill($rounded, 0, 0, imagecolorallocate($rounded, $rgb['r'], $rgb['g'], $rgb['b'])); } else { imagefill($rounded, 0, 0, imagecolorallocatealpha($rounded, 255, 255, 255, 127)); imagesavealpha($rounded, true); } for($x = 0; $x < $width; $x++) { for($y = 0; $y < $height; $y++) { $rgb = imagecolorat($newImage, $x, $y); $r = ($rgb >> 16) & 0xFF; $g = ($rgb >> 8) & 0xFF; $b = $rgb & 0xFF; $a = imagecolorsforindex($mask, imagecolorat($mask, $x, $y)); $a = $a['alpha']; $color = imagecolorallocatealpha($rounded, $r, $g, $b, $a); imagesetpixel($rounded, $x, $y, $color); } } $newImage = $rounded; } switch ($imgType) { case IMAGETYPE_GIF: imagegif($newImage, $cachedPath); break; case IMAGETYPE_JPEG: imagejpeg($newImage, $cachedPath); break; case IMAGETYPE_PNG: imagepng($newImage, $cachedPath); break; default: return false; } } return $cachedUrl; } function removeDoubleSlashes($str) { return str_replace(array('//', '\\', '\\\\'), '/', $str); } function removeFileFromPath($path) { $segments = explode(DIRECTORY_SEPARATOR, $path); $lastSegment = end($segments); if (strpos($lastSegment, '.php')) { array_pop($segments); } return implode('/', $segments); } function get_absolute_path($path) { $path = str_replace(array('/', '\\'), DIRECTORY_SEPARATOR, $path); $parts = array_filter(explode(DIRECTORY_SEPARATOR, $path), 'strlen'); $absolutes = array(); foreach ($parts as $part) { if ('.' == $part) continue; if ('..' == $part) { array_pop($absolutes); } else { $absolutes[] = $part; } } return implode('/', $absolutes); } function mapURL($relPath) { $filePathName = realpath($relPath); $filePath = realpath(dirname($relPath)); $basePath = realpath($_SERVER['DOCUMENT_ROOT']); if (strlen($basePath) > strlen($filePath)) { return ''; } return 'http://' . $_SERVER['HTTP_HOST'] . substr($filePathName, strlen($basePath)); } function rgb_from_hex($hex) { if (!$hex) return; $hex = trim($hex, '#'); $rgb['r'] = hexdec(substr($hex, 0, 2)); $rgb['g'] = hexdec(substr($hex, 2, 2)); $rgb['b'] = hexdec(substr($hex, 4, 2)); return $rgb; } function imageSmoothArcDrawSegment (&$img, $cx, $cy, $a, $b, $color, $start, $stop, $seg) { $fillColor = imageColorExactAlpha( $img, $color[0], $color[1], $color[2], $color[3] ); switch ($seg) { case 0: $xp = +1; $yp = -1; $xa = 1; $ya = -1; break; case 1: $xp = -1; $yp = -1; $xa = 0; $ya = -1; break; case 2: $xp = -1; $yp = +1; $xa = 0; $ya = 0; break; case 3: $xp = +1; $yp = +1; $xa = 1; $ya = 0; break; } for ( $x = 0; $x <= $a; $x += 1 ) { $y = $b * sqrt( 1 - ($x*$x)/($a*$a) ); $error = $y - (int)($y); $y = (int)($y); $diffColor = imageColorExactAlpha( $img, $color[0], $color[1], $color[2], 127-(127-$color[3])*$error ); imageSetPixel($img, $cx+$xp*$x+$xa, $cy+$yp*($y+1)+$ya, $diffColor); imageLine($img, $cx+$xp*$x+$xa, $cy+$yp*$y+$ya , $cx+$xp*$x+$xa, $cy+$ya, $fillColor); } for ( $y = 0; $y < $b; $y += 1 ) { $x = $a * sqrt( 1 - ($y*$y)/($b*$b) ); $error = $x - (int)($x); $x = (int)($x); $diffColor = imageColorExactAlpha( $img, $color[0], $color[1], $color[2], 127-(127-$color[3])*$error ); imageSetPixel($img, $cx+$xp*($x+1)+$xa, $cy+$yp*$y+$ya, $diffColor); } } function imageSmoothArc ( &$img, $cx, $cy, $w, $h, $color, $start, $stop) { while ($start < 0) $start += 2*M_PI; while ($stop < 0) $stop += 2*M_PI; while ($start > 2*M_PI) $start -= 2*M_PI; while ($stop > 2*M_PI) $stop -= 2*M_PI; if ($start > $stop) { imageSmoothArc ( $img, $cx, $cy, $w, $h, $color, $start, 2*M_PI); imageSmoothArc ( $img, $cx, $cy, $w, $h, $color, 0, $stop); return; } $a = 1.0*round ($w/2); $b = 1.0*round ($h/2); $cx = 1.0*round ($cx); $cy = 1.0*round ($cy); for ($i=0; $i<4;$i++) { if ($start < ($i+1)*M_PI/2) { if ($start > $i*M_PI/2) { if ($stop > ($i+1)*M_PI/2) { imageSmoothArcDrawSegment($img, $cx, $cy, $a, $b, $color, $start, ($i+1)*M_PI/2, $i); } else { imageSmoothArcDrawSegment($img, $cx, $cy, $a, $b, $color, $start, $stop, $i); break; } } else { if ($stop > ($i+1)*M_PI/2) { imageSmoothArcDrawSegment($img, $cx, $cy, $a, $b, $color, $i*M_PI/2, ($i+1)*M_PI/2, $i); } else { imageSmoothArcDrawSegment($img, $cx, $cy, $a, $b, $color, $i*M_PI/2, $stop, $i); break; } } } } } ?>