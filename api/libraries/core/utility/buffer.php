<?php
 defined('JPATH_PLATFORM') or die; class JBuffer { public $position = 0; public $name = null; public $buffers = array(); public function stream_open($path, $mode, $options, &$opened_path) { $url = parse_url($path); $this->name = $url['host']; $this->buffers[$this->name] = null; $this->position = 0; return true; } public function stream_read($count) { $ret = substr($this->buffers[$this->name], $this->position, $count); $this->position += strlen($ret); return $ret; } public function stream_write($data) { $left = substr($this->buffers[$this->name], 0, $this->position); $right = substr($this->buffers[$this->name], $this->position + strlen($data)); $this->buffers[$this->name] = $left . $data . $right; $this->position += strlen($data); return strlen($data); } public function stream_tell() { return $this->position; } public function stream_eof() { return $this->position >= strlen($this->buffers[$this->name]); } public function stream_seek($offset, $whence) { switch ($whence) { case SEEK_SET: if ($offset < strlen($this->buffers[$this->name]) && $offset >= 0) { $this->position = $offset; return true; } else { return false; } break; case SEEK_CUR: if ($offset >= 0) { $this->position += $offset; return true; } else { return false; } break; case SEEK_END: if (strlen($this->buffers[$this->name]) + $offset >= 0) { $this->position = strlen($this->buffers[$this->name]) + $offset; return true; } else { return false; } break; default: return false; } } } stream_wrapper_register('buffer', 'JBuffer');