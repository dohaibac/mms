<?php
 defined('LIBS_PATH') or die; class JCryptPasswordSimple implements JCryptPassword { protected $cost = 10; protected $defaultType = '$2y$'; public function create($password, $type = null) { if (empty($type)) { $type = $this->defaultType; } switch ($type) { case '$2a$': case JCryptPassword::BLOWFISH: if (JCrypt::hasStrongPasswordSupport()) { $type = '$2y$'; } else { $type = '$2a$'; } $salt = $type . str_pad($this->cost, 2, '0', STR_PAD_LEFT) . '$' . $this->getSalt(22); return crypt($password, $salt); case JCryptPassword::MD5: $salt = $this->getSalt(12); $salt = '$1$' . $salt; return crypt($password, $salt); case JCryptPassword::JOOMLA: $salt = $this->getSalt(32); return md5($password . $salt) . ':' . $salt; default: throw new InvalidArgumentException(sprintf('Hash type %s is not supported', $type)); break; } } public function setCost($cost) { $this->cost = $cost; } protected function getSalt($length) { $bytes = ceil($length * 6 / 8); $randomData = str_replace('+', '.', base64_encode(JCrypt::genRandomBytes($bytes))); return substr($randomData, 0, $length); } public function verify($password, $hash) { if (substr($hash, 0, 4) == '$2a$' || substr($hash, 0, 4) == '$2y$') { if (JCrypt::hasStrongPasswordSupport()) { $type = '$2y$'; } else { $type = '$2a$'; } $hash = $type . substr($hash, 4); return (crypt($password, $hash) === $hash); } if (substr($hash, 0, 3) == '$1$') { return (crypt($password, $hash) === $hash); } if (preg_match('#[a-z0-9]{32}:[A-Za-z0-9]{32}#', $hash) === 1) { return md5($password . substr($hash, 33)) == substr($hash, 0, 32); } return false; } public function setDefaultType($type) { if (!empty($type)) { $this->defaultType = $type; } } public function getDefaultType() { return $this->defaultType; } }