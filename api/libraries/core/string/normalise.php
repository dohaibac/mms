<?php
 defined('LIBS_PATH') or die; abstract class JStringNormalise { public static function fromCamelCase($input, $grouped = false) { return $grouped ? preg_split('/(?<=[^A-Z_])(?=[A-Z])|(?<=[A-Z])(?=[A-Z][^A-Z_])/x', $input) : trim(preg_replace('#([A-Z])#', ' $1', $input)); } public static function toCamelCase($input) { $input = self::toSpaceSeparated($input); $input = ucwords($input); $input = str_ireplace(' ', '', $input); return $input; } public static function toDashSeparated($input) { $input = preg_replace('#[ \-_]+#', '-', $input); return $input; } public static function toSpaceSeparated($input) { $input = preg_replace('#[ \-_]+#', ' ', $input); return $input; } public static function toUnderscoreSeparated($input) { $input = preg_replace('#[ \-_]+#', '_', $input); return $input; } public static function toVariable($input) { $input = self::toSpaceSeparated($input); $input = self::toCamelCase($input); $input = preg_replace('#^[0-9]+.*$#', '', $input); $first = substr($input, 0, 1); $first = strtolower($first); $input = substr_replace($input, $first, 0, 1); return $input; } public static function toKey($input) { $input = self::toUnderscoreSeparated($input); $input = strtolower($input); return $input; } }